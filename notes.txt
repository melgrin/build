#### v3
v3.pl does gen include redep, but src gen redep should be able to trigger more inc gen, but it doesn't. similar issue goes to obj as well. I think I need to break up 'doThings' more and not call that whole thing and instead just do passes in a while loop until there's nothing left to be done. see v4.pl

#### v4
v4.pl made some good progress with depencies vs generation, and what needs to be done for each file type. but it doesn't work for the initial obj.  main.o needs main.c but it tries to gen main.o and then doesn't know main.c.  and I don't have the information about what other objects are needed for linking main.  like I have the concept to go generate them and/or parse their dependencies, but I don't store information about how I got there.  so then when I go to generate the main, I don't know what to use. for v5 I want to restructure the data so that I can come back at the end and say "link /o main.exe main.o A.o B.o ...".

#### v4.5
I went back to v4 because v5 was too much change.  See v4.5.  It can build main.o.  But I am not super confident in the build order and iteration (dep, gen).  Mainly all I did was put dep first so that it wouldn't try to immediately create main.o.  Does make sense to figure out as many dependencies as possible before trying to generate.  But seems like it should be more direct, like "file X still needs file Y, so we won't try to generate it yet, and also let's go try to make file Y".  TODO: exe

#### v6
v6 is v4.5 but with exe.  Note: when there is a .c target, it generates the includes. that doesn't really make sense.

one issue I'm having is that it's making main.o too early.  I changed it to do all the deps first, but now since the gens aren't ordered by dep, it's just making main.o before anything else.  I could sort the gens to do hdr>src>obj>exe.  I will try that first.  But it doesn't feel like a full solution.  

I fixed v6 to work for exe.  I did this by sorting GEN_QUEUE hdr>src>obj>exe and by only marking dependencies as processed when processDep returned true, which I also had to go add.  In a case where the file doesn't exist, processDep needs to enqueue it for gen and return 0.  I don't like a few things:
- processDep enqueing stuff for gen - would rather return something or check if it exists first.
- when linking the exe, I just do "link *.o".  not a good idea (different directories, objs that just happen to be in the directory, etc).

for v7 I want to actually keep track of dependencies.  main loop will be able to see what is waiting for what (instead of just sorting by filetype and generating everything, though that honestly seems to work ok in my case).  also when linking will be able to specify exact objs.

#### v7
I mentioned this earlier but I am also doing .c deps wrong.  the same issue extends to exe deps, but it's just hidden by isExec and explicit call to processGen($target) at the end of main.  basically it's a one-step-removed depenency.  like obj depends on hdrs via src, but right now I'm saying src depends on hdr.  test case:
> v7 gen.c # should only create gen.c, not gen.h
> v7 gen.o # should create gen.c and gen.h

the chain backwards thing that happens for exes needing objs from srcs of hdrs doesn't happen for objs too.  I said that earlier.  Not sure what I was thinking.

why doesn't v7 discover that main.exe depends on B.o?

backing out the obj after failing to gen the src in the context of exe link dep is hard.  I think I had a pretty good strategy several versions ago.  even though if($isExec) all over the place is ugly, that's what I need to do.  Maybe I can make the flag not global, but not sure it matters.  But I'm having a really hard time figuring out a relatively general way to maybe need to make an obj based on a src that's maybe generated that's also maybe nonexistent despite there being a header (which could also maybe be generated).

#### v8
with some nasty stuff up front, v8 works.  the thing that works is '..\v8.pl main.o'.  because it's hardcoded to always do the exec logic, it does that too.  so it produces all the other objs, like A.o, B.o, and the Gen ones too (and the gen srcs/hdrs to get there).  needs a lot of cleanup, but moving onto next version to do that so I don't break this.

#### v9
v9 is as I want it, all target types work as they should. still want to do more cleanup and maybe reevaluate the link dep logic to see if I can merge it into blah.

#### v10
v10 cleaned up the link dep logic quite a bit. still not as clean as I would like it.

#### v11
v11 is hopefully for removing some of the global hashes.  because I want to see if it's awful to not have them.  kind of running out of meaningful stuff to do tbh.
    updateGlobalDeps_v2 - was replacing original with this. not "Global" anymore.
    deps_global in the local hash should have the same values as DEPS. ideally could replace global DEPS?
    src exts (hdr exts, obj exts)

I am breaking v11 pretty bad.  might be able to go back to blah_v3.  but better to just go back to v10 if v11 becomes irredeemable.

# XXX I want to make stuff in ALL all hrefs to each other. Is that going to cause maniac refs going everywhere? Probably yes, but we'll see.
struct Thing {
    Name name;
    List<Thing*> dependants;
    List<Thing*> dependantOn;
};
Map<Name, Thing*> ALL;

#### v12
Moving to v12 to try to replace blah_v4.  I think that it is doing too much with too many conditionals.  the actual issue right now is "make clean && ..\v11.pl main.exe && ..\v11.pl main.exe".  the second v11.pl call fails because the script doesn't know about any of the objs except main.o (which I directly told it).  this is because blah handles dependency discovery and generation together and since those .c and .o files already exist from the first call to v11.pl, they don't need to be generated, so the script doesn't determine their dependencies, they don't get into the map, etc.  I'm not entirely sure where the breaking point is.  I want to try a more phased approach, kind of like the link stuff.

2020-Sep-20 - v12 - the restructuring was successful, I think.  as before, it works after a make clean.  but repeated 'main.exe' fails because .o aren't in ALL.

#### v13
2020-Oct-20 - v13 - Fixed the remake link error.  Not sure the solution should be outside that loop like it is.  It also assumes that everything in ALL is for the current exe.  But the program can only create one target right now anyway (shift @ARGV, not for @ARGV), so other stuff would have to get updated too.

#### v14
2020-Oct-24 - v14 - Works for multiple user-specified targets.  ..\v14.pl main.exe other_main.exe.  These two have partially different dependencies.  Built separately, only the deps for that target are created.  -d cmd is useful to see this.

####
2020-Oct-30 - I was somehow getting a hash into the keys of %ALL, so I got mad and ported the script to C++

####
2021-Feb-14 - In order to properly do exe deps, I think the program needs to understand what is possible to generate, not just what already exists.  The specific issue right now is that during the .h -> .c exe-only dep check, would-be-generated .c files don't exist after only building main.o.  This can be seen by running "make clean; build -d ld main.exe".  Basically need knowledge of whether a make-style recipe (generation function) exists.  Actually, right now, it always does.  So I guess for correctness I can confirm that Entry.generationFunction exists if the file doesn't, and add it to the ld srcs list.

